Full Documentation 
https://github.com/data-guru0/ANIME-RECOMMENDER-SYSTEM-LLMOPS/blob/main/FULL_DOCUMENTATION.md

HuggingFace
https://huggingface.co/settings/tokens

Groq
https://console.groq.com/keys


# Create virtual environment
python -m venv venv 

# Activate
venv\Scripts\activate

Steps:
1. Create .env file and update API keys
2. Create a folder called data and copy the anime_with_synopsis.csv file
3. Create a file called setup.py and update the code
4. To install requirements (setup) -> Run the command: pip install -e .
This will install requirements and packages. 
Whenever you create a new package, this command has to be run again to install them
5. Create a folder "src", Create __init__.py file 
6. Create a folder "utils", Create __init__.py file 
7. Create a file "logger.py", "custom_exception.py" in "utils" folder. Copy code from Git
8. Create a folder "config", Create __init__.py file 
9. Create a folder "app" (Main application created here), Create __init__.py file 
10. Create a folder "pipeline" (All components are joined here), Create __init__.py file 
11. Run the command: "pip install -e ." To install all the above packages
12. Create a file "config.py" under "config" directory. Update the code.
13. Create a file "data_loader.py" under "src" directory. Update the code.
14. Create a file "vector_store.py" under "src" directory. Update the code. 
15. Create a file "prompt_template.py" under "src" directory. Update the code. 
16. Create a file "recommender.py" under "src" directory. Update the code. 
17. Create a file "pipeline.py" under "pipeline" directory. Update the code (This will do recommendation)
18. Create a file "build_pipeline.py" under "pipeline" directory. Update the code. (This creates vector_store)
19. Run the build_pipeline. To create "anime_updated.csv" under "data" directory
python pipeline/build_pipeline.py
20. Check the logs directory to see logs 
21. Create a file "app.py" under "app" directory. Update the code
22. Run the streamlit app
streamlit run app/app.py
23. Update the code in "Dockerfile"
24. Create the file "llmops-k8s.yaml". Update the code
25. Create the file ".gitignore". Update the paths to be ignored
26. To push files to git 
git init 
git branch -M main 
git remote add origin https://github.com/sreekanthmuni66/ANIME_RECOMMENDER_SYSTEM_LLMOPS.git  
git add . 
git commit -m "commit"
git push origin main 
27. Deploying application to GCP
Login to GCP 
Searcn VM instances
Create new 
Machine Type: E2 (standard/16GB/2 core)
OS - Ubuntu 24.04 LTS x86/64 amd64 noble image built on 2025-06-06
Size: 150 GB 
Go to Networking
Allow HTTP, HTTPS, Load Balancer Health Checks, Enable IP Forwarding
Click on "Create" 

Once VM instance is created
Click on SSH 
Click on Authorize

https://docs.docker.com/engine/install/ubuntu/

1. Setup Docker's apt repository

# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

2. Install Docker package
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

3. Verify the installation 
sudo docker run hello-world

If you do not want to use sudo 
https://docs.docker.com/engine/install/linux-postinstall/

1. Create a docker group 
sudo groupadd docker

2. Add your user to docker group
sudo usermod -aG docker $USER

3. Log out and log back in so that your group membership is re-evaluated.
If you're running Linux in a virtual machine, it may be necessary to restart the virtual machine for changes to take effect.

You can also run the following command to activate the changes to groups:
newgrp docker

4. Verify that you can run docker commands without sudo.
docker run hello-world

Post install: 
https://docs.docker.com/engine/install/linux-postinstall/

sudo systemctl enable docker.service
sudo systemctl enable containerd.service

Now docker setup is done
docker version 

Install minikube 
https://minikube.sigs.k8s.io/docs/start/?arch=%2Flinux%2Fx86-64%2Fstable%2Fbinary+download

Commands:
curl -LO https://github.com/kubernetes/minikube/releases/latest/download/minikube-linux-amd64
sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64
minikube start


Install kubectl 
https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/

Commands:
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
kubectl version --client

Refer: https://github.com/data-guru0/ANIME-RECOMMENDER-SYSTEM-LLMOPS/blob/main/FULL_DOCUMENTATION.md

Github integration with Local and VM
====================================
Git Link: https://github.com/sreekanthmuni66/ANIME_RECOMMENDER_SYSTEM_LLMOPS
git clone https://github.com/sreekanthmuni66/ANIME_RECOMMENDER_SYSTEM_LLMOPS.git
ls
cd ANIME_RECOMMENDER_SYSTEM_LLMOPS/
ls 

git config --global user.email "sreekanthmuni66@gmail.com"
git config --global user.name "sreekanthmuni66"

git add .
git commit -m "commit"
git push origin main
Once you enter it will ask for username: sreekanthmuni66 (Enter)
Now, it will ask for passowd: 

Go to github, profile, settings, Developer Settings, Personal Access tokens, Create new token


git pull origin main 

GCP Firewall rule setup
=======================
Login to GCP
Search for VPC network 
Click on Firewall 
Click on "Create firewall rule"
Name: allow-jenkins
Description: Allow all traffic (for Jenkins demo)
Logs: Off
Network: default 
Direction: ingress 
Action: allow 
Targets: All instances 
Source IP ranges: 0.0.0.0/0 
Allowed protocols and ports: all
Click on "Create" 

Deployment of App on kubernetes
===============================
##Point Docker to minikube 
eval $(minikube docker-env)

docker build -t llmops-app:latest . 
docker images 

kubectl create secret generic llmops-secrets \
  --from-literal=GROQ_API_KEY="api_key1" \
  --from-literal=HUGGINGFACEHUB_API_TOKEN="api_key2"

kubectl apply -f llmops-k8s.yaml

kubectl get pods 
kubectl get svc 
# you will see pods running 

# Do minikube tunnel on one terminal 
minikube tunnel 

# Open another terminal 
kubectl port-forward svc/llmops-service 8501:80 --address 0.0.0.0 

##Now copy external ip and :8501 and see ur app there
You can see your streamlit app running here. 

Monitoring kubernetes using Grafana Cloud
=========================================

# Open another VM terminal for Grafana cloud 
kubectl get ns 
kubectl create ns Monitoring
kubectl get ns 

# Make account on Grafana Cloud 
# Install HELM - Search on Google 
- You will get 3 commands

https://helm.sh/docs/intro/install/
$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
$ chmod 700 get_helm.sh
$ ./get_helm.sh



Come to Grafana Cloud -> Left pane observability -> kubertes -> Start sending data 
In backend installation -> Hit install 
Give your clustername and namespace there: 
cluster-name: minikube and 
namespace: monitoring (in our case)
Select kubernetes 
Keep only things on as default 
Here only create new access token give name lets give minikube-token & create it and save it somewhere
Select helm and deploy helm charts is already generated 

Come to terminal --> Create a file 
vi values.yaml 

Paste all from there to your file now remove last EOF part & also initial part save that initial part we need it. 

Docker commands
1. docker ps 
2. docker ps -a
3. docker images
4. docker pull hello-world
5. docker images
6. docker run hello-world
7. docker ps -a
8. 


Groq Models
https://console.groq.com/docs/models

To trigger build_pipeline
python pipeline/build_pipeline.py

streamlit run app/app.py


